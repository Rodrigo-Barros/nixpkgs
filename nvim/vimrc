" VIM STARTUP
" {{{

augroup startup
  au!


  au BufEnter * :packadd nvim-lspconfig
  au BufReadPre *.nix :packadd vim-nix
  " LAZY LOADING PLUGINS BY FILE TYPE
  
  au FileType php,javascript,css,python,vim,html :packadd auto-pairs
  au FileType php,javascript,css,python,vim,html :packadd MatchTagAlways
  au FileType php,javascript,css,python,vim,html :packadd vim-surround

  au FileType php,javascript,python,sql :packadd dbext
  au FileType php,javascript,python,sql :DBSetOption profile=mySQL

	" WORKAROUNDS
	" {{{
	" FIX HUNKS ISSUE FOUND AT :https://github.com/NixOS/nixpkgs/issues/96062
	packadd! gitsigns.nvim
	" }}}
augroup END

" }}}

" VIM SETTINGS
" {{{

set ts=2 sw=2 ai
set laststatus=2
set number
set relativenumber
set mouse=n
set termguicolors
let g:mapleader = "\<Space>"
set signcolumn=yes
set updatetime=100
colorscheme onedark

" }}}

" PLUGINS SETTINGS
" {{{

" WHICHKEY
" {{{ 

let g:which_key_map = {}
let g:which_key_map.l = {
      \'name':'Lazygit',
      \'g':'open'
      \}

let g:which_key_map.s = {
	\'name':'SQL',
	\'e':'executar o sql destacado',
	\}

let g:which_key_map.t = {
			\'/':'busca',
      \'name':'Telescope',
      \'o':'abrir arquivos',
			\'c': 'comandos',
			\'r':'registradores',
			\'k':'keymaps'
      \}

let g:which_key_map.f = {
			\'name':'Fugitive',
			\'s':'status',
			\'l':'log',
			\'d':'diff',
			\'b':'author',
			\'u':'pull',
			\'p':'push'
			\}

let g:which_key_map.w = 'Vim Wiki'
let g:which_key_map.b = 'NvimTree'
let g:which_key_map.T = 'TaskWarrior'

" }}}

" DBEXT
" {{{
let g:dbext_default_profile_mySQL = 'type=MYSQL:user=admin:passwd=admin:dbname=programador_junior'
" }}}

" GITSIGNS
"{{{
lua require('gitsigns').setup()
"}}}

" LSP
" {{{
lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  --Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { "bashls", "rust_analyzer", "tsserver" }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end
EOF
" }}}

" NVIM-COMPE
" {{{
lua << EOF
vim.o.completeopt = "menuone,noselect"
compe=require('compe')
compe.setup {
  enabled = true;
  autocomplete = true;
  debug = false;
  min_length = 1;
  preselect = 'enable';
  throttle_time = 80;
  source_timeout = 200;
  resolve_timeout = 800;
  incomplete_delay = 400;
  max_abbr_width = 100;
  max_kind_width = 100;
  max_menu_width = 100;
  documentation = {
    border = { '', '' ,'', ' ', '', '', '', ' ' }, -- the border option is the same as `|help nvim_open_win|`
    winhighlight = "NormalFloat:CompeDocumentation,FloatBorder:CompeDocumentationBorder",
    max_width = 120,
    min_width = 60,
    max_height = math.floor(vim.o.lines * 0.3),
    min_height = 1,
  };

  source = {
    path = true;
    buffer = true;
    calc = true;
    nvim_lsp = true;
    nvim_lua = true;
    vsnip = true;
    ultisnips = true;
    luasnip = true;
  };
}

local function t(str)
    return vim.api.nvim_replace_termcodes(str, true, true, true)
end

function _G.smart_tab()
    return vim.fn.pumvisible() == 1 and t'<C-n>' or t'<Tab>'
end

function _G.smart_shift_tab()
    return vim.fn.pumvisible() == 1 and t'<C-p>' or t'<S-Tab>'
end

vim.api.nvim_set_keymap('i', '<Tab>', 'v:lua.smart_tab()', {expr = true, noremap = true})
vim.api.nvim_set_keymap('i', '<S-Tab>', 'v:lua.smart_shift_tab()', {expr = true, noremap = true})

EOF
" }}}

" }}}

" KEYBINDS
" {{{

" GENERAL
" {{{
" MOVING BETWEEN TABS
nnoremap <silent> <C-H> :tabNext<CR>
nnoremap <silent> <C-L> :tabprevious<CR>

" MOVING BETWEEN SPLITS
nnoremap <C-M-L> <C-W><C-L>
nnoremap <C-M-H> <C-W><C-H>
nnoremap <C-M-J> <C-W><C-J>
nnoremap <C-M-K> <C-W><C-K>

" EXIT ON jj
inoremap jj <ESC>

" DISABLE ARROWS
nnoremap <UP> <NOP>
nnoremap <DOWN> <NOP>
nnoremap <LEFT> <NOP>
nnoremap <RIGHT> <NOP>

" MOVE LINE UP OR DOWN
nnoremap <M-J> :m .+1<CR>==
nnoremap <M-K> :m .-2<CR>==
inoremap <M-J> <Esc>:m .+1<CR>==gi
inoremap <M-K> <Esc>:m .-2<CR>==gi
vnoremap <M-J> :m '>+1<CR>gv=gv
vnoremap <M-K> :m '<-2<CR>gv=gv

" }}}

" Telescope
" {{{
nnoremap <leader>to :Telescope find_files<CR>
nnoremap <leader>t/ :Telescope current_buffer_fuzzy_find<CR>
nnoremap <leader>tr :Telescope registers<CR>
nnoremap <leader>tc :Telescope commands<CR>
nnoremap <leader>tk :Telescope keymaps<CR>

" }}}
 
" }}}

" LAZY LOADING PLUGINS BY KEYBIND
" {{{

" SINGLE
" {{{ 
nnoremap <silent> <leader> :packadd whichKey \| call which_key#register('<Space>', "g:which_key_map") \| :WhichKey '<Space>'<CR>

nnoremap <silent> <leader>lg :packadd lazygit \|:LazyGit<CR>
nnoremap <silent> <leader>w :packadd vimwiki \|:VimwikiIndex<CR>

nnoremap <silent> <leader>T :packadd taskwarrior \| :TW <CR>
nnoremap <silent> <leader>b :packadd nvim-tree-lua \| :NvimTreeToggle <CR>

" }}}

" VIM FUGITIVE
" {{{
nnoremap <silent> <leader>fs :packadd vim-fugitive \| :Gstatus <CR>
nnoremap <silent> <leader>fl :packadd vim-fugitive \| :GcLog <CR>
nnoremap <silent> <leader>fd :packadd vim-fugitive \| :Gvdiffsplit <CR>
nnoremap <silent> <leader>fb :packadd vim-fugitive \| :Gblame<CR>
nnoremap <silent> <leader>fu :packadd vim-fugitive \| :Git pull<CR>
nnoremap <silent> <leader>fp :packadd vim-fugitive \| :Git push<CR>

" }}}

" }}}

" vim: set foldmethod=marker:
